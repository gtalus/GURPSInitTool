package gurpsinittool.data.traits;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import gurpsinittool.data.Actor;
import gurpsinittool.data.DamageExpression;
import gurpsinittool.data.DamageExpression.DamageType;

/**
 * Vulnerability: supports basic damage types only. 'cr*2' or 'pi- x 2'
 * @author dcsmall
 *
 */
public class Vulnerability {
	/**
	 * Logger
	 */
	private final static Logger LOG = Logger.getLogger(Vulnerability.class.getName());
	
	private static HashMap<DamageType, Integer> vulns = new HashMap<DamageType, Integer>();
	
	/**
	 * Report debug information to the actor about how this trait is parsed
	 * @param actor
	 */
	public static void reportDebugTrait(Actor actor) {
		getVulns(actor);
		String value = "";
		for(Entry<DamageType, Integer> entry : vulns.entrySet()) {
			value += entry.getKey() + ":" + entry.getValue() + ", ";
		}
		value =  value.equals("")?"none":value;
		actor.setTemp("_Vulnerability", value);
	}

	/**
	 * Refresh the vulns hash based on the specified actor
	 * @param actor
	 */
	private static void getVulns(final Actor actor) {
		final ArrayList<String> vulnerabilities = actor.getTraitValueArray("Vulnerability"); // Empty array if actor does not have this trait
    	Matcher matcher;
    	// TODO: support other types? with spaces in the name?
    	Pattern vulnPattern = Pattern.compile("^([\\w\\+-]+)\\s*(?:\\*|x)\\s*(\\d+)$");
    	vulns.clear();
    	for (String vuln : vulnerabilities) {
    		if ((matcher = vulnPattern.matcher(vuln)).matches()) { 			
    			String vulnName = matcher.group(1);
    			int vulnValue = Integer.valueOf(matcher.group(2));
    			try { 
    				DamageType type = DamageExpression.parseType(vulnName);
    				vulns.put(type, vulnValue);
    			} catch (Exception e) {
    				if(LOG.isLoggable(Level.INFO)) {LOG.info("Unrecognized damage type: '" + vulnName + "'"); }
    			}
    		} else if(LOG.isLoggable(Level.INFO)) {LOG.info("Unable to break down vulnerability: '" + vuln + "'"); }
    	}
	}
	

	/**
	 * Determine vulnerability wounding multiplier based on actor and damage type
	 * @param actor- the actor who's vulnerabilities to use
	 * @param type - the type of damage being applied
	 * @return the wounding multiplier (default is 1)
	 */
    public static int getVulnerabilityMultiplier(final Actor actor, final DamageType type) {
    	getVulns(actor);	
    	int vulnFinalMult = 1;
    	if (vulns.containsKey(type)) {
    		vulnFinalMult = vulns.get(type);
    	}
    	return vulnFinalMult;
    }
}
