/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gurpsinittool.ui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFormattedTextField;
import javax.swing.KeyStroke;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.DefaultFormatter;

import gurpsinittool.app.GITApp;
import gurpsinittool.data.Actor;
import gurpsinittool.data.Damage;
import gurpsinittool.data.Damage.DamageType;
import gurpsinittool.util.DieRoller;

/**
 *
 * @author dcsmall
 */
public class DefenseDialog extends javax.swing.JDialog {

	Actor actor;
	int effParry; // Parry with multiple-parry penalty
	int effBlock; // Block with multiple-block penalty
	int effDodge; // Dodge with fatigue/injury penalty
	int effectiveDefenseValue;
	public int shieldDamage;
	public int injury;
	public int fatigue;
	public boolean successful;
	public enum DefenseType {Parry, Block, Dodge};
	public DefenseType defenseType;
	public boolean valid = false;
	
    /**
     * Creates new form DefenseDialog
     */
    public DefenseDialog(Actor actor, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initEnterEsc();
        setActor(actor);
        damageTextField.selectAll();
        damageTextField.requestFocusInWindow();
    }		

    private void initEnterEsc() {
    	Action cancelAction = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                cancelButtonActionPerformed(actionEvent); } };
        Action okAction = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                okButtonActionPerformed(actionEvent); } };
        Action eeAction = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                eeCheck.doClick(); } };
        Action retreatAction = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                retreatCheck.doClick(); } };
        Action sideAction = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
                sideCheck.doClick(); } };
        Action deceptiveAction = new AbstractAction() {
            public void actionPerformed(ActionEvent actionEvent) {
               otherSpinner.setValue(otherSpinner.getPreviousValue()); } };
                                               
                
        damageTextField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "OK");
        damageTextField.getActionMap().put("OK", okAction); 
        damageTextField.getInputMap(JComponent.WHEN_FOCUSED).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "CANCEL");
        damageTextField.getActionMap().put("CANCEL", cancelAction); 
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), "OK");
        getRootPane().getActionMap().put("OK", okAction); 
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), "CANCEL");
        getRootPane().getActionMap().put("CANCEL", cancelAction); 
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("control E"), "ExtraEffort");
        getRootPane().getActionMap().put("ExtraEffort", eeAction); 
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("control R"), "Retreat");
        getRootPane().getActionMap().put("Retreat", retreatAction); 
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("control S"), "Side");
        getRootPane().getActionMap().put("Side", sideAction); 
        getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT).put(KeyStroke.getKeyStroke("control D"), "Deceptive");
        getRootPane().getActionMap().put("Deceptive", deceptiveAction); 
     
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        okButton = new javax.swing.JButton();
        blockNote = new javax.swing.JLabel();
        dodgeNote = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        parryNote = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        shieldCheckBox = new javax.swing.JCheckBox();
        blockButton = new javax.swing.JRadioButton();
        cancelButton = new javax.swing.JButton();
        parryButton = new javax.swing.JRadioButton();
        rerollButton = new javax.swing.JButton();
        retreatCheck = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        dodgeButton = new javax.swing.JRadioButton();
        eeCheck = new javax.swing.JCheckBox();
        sideCheck = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        effectiveDefense = new javax.swing.JLabel();
        name = new javax.swing.JTextField();
        result = new javax.swing.JTextField();
        shield_dr = new javax.swing.JLabel();
        db = new javax.swing.JLabel();
        shield_hp = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        rollTextField = new javax.swing.JFormattedTextField();
        drTextField = new javax.swing.JFormattedTextField();
        damageTextField = new javax.swing.JTextField();
        damageIcon = new javax.swing.JLabel();
        otherSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        okButton.setMnemonic('k');
        okButton.setText("OK");
        okButton.setToolTipText("");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        blockNote.setText("(10-4=12)");

        dodgeNote.setText("(10)");

        jLabel4.setText("Other");

        parryNote.setText("(10-8=12)");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Damage:");

        shieldCheckBox.setSelected(true);
        shieldCheckBox.setText("Shield:");
        shieldCheckBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                valuePropertyChanged(evt);
            }
        });

        buttonGroup1.add(blockButton);
        blockButton.setText("Block");
        blockButton.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                valuePropertyChanged(evt);
            }
        });

        cancelButton.setMnemonic('c');
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(parryButton);
        parryButton.setSelected(true);
        parryButton.setText("Parry");
        parryButton.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                valuePropertyChanged(evt);
            }
        });

        rerollButton.setText("Reroll");
        rerollButton.setMargin(new java.awt.Insets(2, 4, 2, 4));
        rerollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rerollButtonActionPerformed(evt);
            }
        });

        retreatCheck.setText("Retreat");
        retreatCheck.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                valuePropertyChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Roll:");

        buttonGroup1.add(dodgeButton);
        dodgeButton.setText("Dodge");
        dodgeButton.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                valuePropertyChanged(evt);
            }
        });

        eeCheck.setText("Extra Effort");
        eeCheck.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                valuePropertyChanged(evt);
            }
        });

        sideCheck.setText("Side Attack");
        sideCheck.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                valuePropertyChanged(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Effective Defense:");

        effectiveDefense.setText("97");

        name.setEditable(false);
        name.setBackground(new java.awt.Color(236, 233, 216));
        name.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        name.setText("name");
        name.setBorder(null);
        name.setFocusable(false);

        result.setEditable(false);
        result.setBackground(new java.awt.Color(236, 233, 216));
        result.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        result.setText("result");
        result.setBorder(null);
        result.setFocusable(false);

        shield_dr.setText("DR: 4");

        db.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        db.setText("DB: 2");

        shield_hp.setText("HP: 20/20");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("DR:");

        rollTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        rollTextField.setText("98");

        drTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));

        damageIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/exclamation.png"))); // NOI18N

        otherSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                otherSpinnerStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(name)
            .addComponent(result)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(36, 36, 36)
                                .addComponent(rollTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rerollButton))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(dodgeButton)
                                        .addComponent(parryButton, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addComponent(blockButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(blockNote)
                                    .addComponent(dodgeNote)
                                    .addComponent(parryNote))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(retreatCheck)
                                    .addComponent(sideCheck)
                                    .addComponent(eeCheck)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(effectiveDefense))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(damageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(damageIcon))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(41, 41, 41)
                                .addComponent(drTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(shieldCheckBox)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(db)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(shield_dr))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(otherSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel4)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(shield_hp)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addGap(1, 1, 1)
                        .addComponent(cancelButton))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(parryButton)
                            .addComponent(parryNote))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(blockButton)
                            .addComponent(blockNote))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dodgeButton)
                            .addComponent(dodgeNote)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(eeCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(retreatCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sideCheck)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shieldCheckBox)
                    .addComponent(db)
                    .addComponent(shield_dr)
                    .addComponent(shield_hp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(otherSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(effectiveDefense))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rollTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rerollButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(drTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(damageIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(damageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(result, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    	System.out.println("DefenseDialog: OK!");
    	valid = true;
    	setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    	System.out.println("DefenseDialog: CANCEL!");
    	setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void rerollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rerollButtonActionPerformed
    	rollDefense();
    }//GEN-LAST:event_rerollButtonActionPerformed

    private void valuePropertyChanged(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_valuePropertyChanged
        calcEffectiveDefense();
    }//GEN-LAST:event_valuePropertyChanged

    private void otherSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_otherSpinnerStateChanged
        calcEffectiveDefense();
    }//GEN-LAST:event_otherSpinnerStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DefenseDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DefenseDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DefenseDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DefenseDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DefenseDialog dialog = new DefenseDialog(null, new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton blockButton;
    private javax.swing.JLabel blockNote;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel damageIcon;
    private javax.swing.JTextField damageTextField;
    private javax.swing.JLabel db;
    private javax.swing.JRadioButton dodgeButton;
    private javax.swing.JLabel dodgeNote;
    private javax.swing.JFormattedTextField drTextField;
    private javax.swing.JCheckBox eeCheck;
    private javax.swing.JLabel effectiveDefense;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField name;
    private javax.swing.JButton okButton;
    private javax.swing.JSpinner otherSpinner;
    private javax.swing.JRadioButton parryButton;
    private javax.swing.JLabel parryNote;
    private javax.swing.JButton rerollButton;
    private javax.swing.JTextField result;
    private javax.swing.JCheckBox retreatCheck;
    private javax.swing.JFormattedTextField rollTextField;
    private javax.swing.JCheckBox shieldCheckBox;
    private javax.swing.JLabel shield_dr;
    private javax.swing.JLabel shield_hp;
    private javax.swing.JCheckBox sideCheck;
    // End of variables declaration//GEN-END:variables
    
    public void setActor(Actor actor) {
    	this.actor = actor;
    	
    	name.setText(actor.Name);
    	switch (actor.Type) {
		case PC:
			name.setBackground(new Color(200,255,200));
			break;
		case Ally:
			name.setBackground(new Color(200,200,255));
			break;
		case Enemy:
			name.setBackground(new Color(255,200,200));
			break;
		case Neutral:
			name.setBackground(new Color(200,200,200));
			break;
		case Special:
			name.setBackground(new Color(255,200,255));
			break;
		}
    	
    	// Calculate effective base defense values
    	effParry = actor.Parry - actor.numParry * 4;
    	effBlock = actor.Block - actor.numBlock * 5;
    	effDodge = actor.Dodge;
    	if (actor.Injury > 2*actor.HP/3)
    		effDodge = (int) Math.ceil(effDodge/2.0);
    	if (actor.Fatigue > 2*actor.FP/3)
    		effDodge = (int) Math.ceil(effDodge/2.0);
    	
    	parryNote.setText(effParry + (effParry!=actor.Parry?" (base: " + actor.Parry + ")":""));
    	blockNote.setText(effBlock + (effBlock!=actor.Block?" (base: " + actor.Block + ")":""));
    	dodgeNote.setText(effDodge + (effDodge!=actor.Dodge?" (base: " + actor.Dodge + ")":""));
    	
    	// Pick the best
    	if (effParry > effDodge) {
    		if (effBlock > effParry) {
    			blockButton.setSelected(true);
    		} else {
    			parryButton.setSelected(true);
    		}
    	} else if (effBlock > effDodge) {
    		blockButton.setSelected(true);
    	} else {
    		dodgeButton.setSelected(true);
    	}
    	
    	shieldCheckBox.setSelected(actor.DB > 0 && actor.ShieldDamage < actor.ShieldHP);
    	db.setText("DB: " + actor.DB);
    	shield_dr.setText("DR: " + actor.ShieldDR);
    	shield_hp.setText("HP: " + (actor.ShieldHP-actor.ShieldDamage) + "/" + actor.ShieldHP);
    	drTextField.setText("" + actor.DR);
    	
    	calcEffectiveDefense();
    	rollDefense();
    	
    	// Setup doc listeners
    	JFormattedTextField field = (JFormattedTextField) otherSpinner.getEditor().getComponent(0);
    	DefaultFormatter formatter = (DefaultFormatter) field.getFormatter();
    	formatter.setCommitsOnValidEdit(true);
    	rollTextField.getDocument().addDocumentListener(new ValueDocumentListener());
    	drTextField.getDocument().addDocumentListener(new ValueDocumentListener());
    	damageTextField.getDocument().addDocumentListener(new ValueDocumentListener());
    }
    
    private void calcEffectiveDefense() {
    	if (actor == null) return;
    	
    	int def = 0;
    	if (parryButton.isSelected()) {
    		defenseType = DefenseType.Parry;
    		def = effParry;
    	} else if (blockButton.isSelected()) {
    		defenseType = DefenseType.Block;
    		def = effBlock;
    	} else if (dodgeButton.isSelected()) {
    		defenseType = DefenseType.Dodge;
    		def = effDodge;
    	} else {
    		System.out.println("-E- DefenseDialog: calcEffectiveDefense: no defense selected!");
    	}
    	
    	fatigue = 0;
    	if (eeCheck.isSelected()) {
    		def += 2;
    		fatigue = 1;
    	}
    	if (retreatCheck.isSelected())
    		def += dodgeButton.isSelected() ? 3 : 1;
    	if (sideCheck.isSelected())
    		def -= 2;
    	if (shieldCheckBox.isSelected())
    		def += actor.DB;
    	
    	// Other
    	try {
    		def += Integer.parseInt(otherSpinner.getValue().toString());
    	} catch (NumberFormatException e) {}
    	
    	effectiveDefenseValue = def;
    	effectiveDefense.setText(String.valueOf(effectiveDefenseValue));
    	calcResult();
    }
    
    private void rollDefense() {
    	rollTextField.setText(String.valueOf(DieRoller.roll3d6()));
    }
    
    private void calcResult() {
    	int roll = 99;
    	int dr = 99;
    	Damage damage = new Damage(0, DamageType.cr);
    	successful = true; // Was defense roll successful?
    	
    	try {
    		roll = Integer.parseInt(rollTextField.getText());
    		dr = Integer.parseInt(drTextField.getText());
    		damage = Damage.ParseDamage(damageTextField.getText());
    	} catch (Exception e) {
    		//System.out.println("-E- DefenseDialog.calcResult: Error parsing integer field! " +roll + "," + dr + "," + damage + ": " + e.getMessage());
    		damageIcon.setIcon(new ImageIcon(GITApp.class.getResource("/resources/images/exclamation.png")));
    		return; // Don't make any changes
    	}
		damageIcon.setIcon(new ImageIcon(GITApp.class.getResource("/resources/images/accept.png")));
		     	
    	int shield_db = shieldCheckBox.isSelected() ? actor.DB : 0;
    	// Parried, Blocked, Dodged, Hit Shield, Hit
    	injury = 0;
    	shieldDamage = 0;
    	result.setBackground(new Color(200,200,200));
    	if (roll <= 4 || (roll <= (effectiveDefenseValue-10) && roll <= 6)) { // Crit Defense!
    		result.setText("Critical Defense!");
    		result.setBackground(new Color(200,200,255));
    	}
    	else if (roll > effectiveDefenseValue || roll > 16) { // Hit!
    		successful = false;
    		result.setBackground(new Color(255,200,200));
			// Remove DR (coverDR already has armor divisor applied)
			int basicDamage = (int) (damage.BasicDamage - Math.floor(dr/damage.ArmorDivisor));
			basicDamage = Math.max(0, basicDamage);
			injury = (int) (basicDamage*damage.DamageMultiplier()); 
    		// Min damage 1 if any got through DR
			injury = (injury <= 0 && basicDamage > 0)?1:injury;
			
			if (injury != 0) {
    			result.setBackground(new Color(255,200,200));
				result.setText("Hit: " + injury + " injury!");
			} else {
				result.setText("Hit: no injury");
    		}
    	} else if (roll > effectiveDefenseValue - shield_db) { // Shield Hit!
    		// Calculate shield damage
    		int shieldBasicDamage = (int) (damage.BasicDamage - Math.floor(actor.ShieldDR/damage.ArmorDivisor));
    		// Apply min/max values
    		shieldBasicDamage = Math.min((int)Math.ceil(actor.ShieldHP/4), shieldBasicDamage);
    		shieldBasicDamage = Math.max(0, shieldBasicDamage);
    		shieldDamage = (int) (Math.floor(shieldBasicDamage*damage.DamageMultiplierHomogenous()));
    		// Min damage 1 if any got through DR
    		shieldDamage = (shieldDamage <= 0 && shieldBasicDamage > 0)?1:shieldDamage; 
    		
    		// Calculate cover DR, apply armor divisor
    		int coverDR = (int) (Math.floor(actor.ShieldDR/damage.ArmorDivisor) + Math.ceil(actor.ShieldHP/4));
    		if (damage.BasicDamage > coverDR) {
    			// Remove DR (coverDR already has armor divisor applied)
    			int basicDamage = (int) (damage.BasicDamage - coverDR - Math.floor(dr/damage.ArmorDivisor));
    			basicDamage = Math.max(0, basicDamage);
    			injury = (int) (basicDamage*damage.DamageMultiplier()); 
        		// Min damage 1 if any got through DR
    			injury = (injury <= 0 && basicDamage > 0)?1:injury;
    		}
    		
			if (injury != 0) {
    			result.setBackground(new Color(255,200,200));
				result.setText("Shield Hit (" + shieldDamage + " damage): " + injury + " injury!");
			} else if (shieldDamage != 0) {
    			result.setBackground(new Color(255,255,200));
        		result.setText("Shield Hit (" + shieldDamage + " damage): no injury");
			} else {
				result.setText("Shield Hit: no damage");
    		}
    	} else { // Miss!
    		result.setText("Defended!");
    	}
    }
    
	/**
	 * Internal class to listen to the changes in text components
	 */
	protected class ValueDocumentListener implements DocumentListener {
	    public void insertUpdate(DocumentEvent e) {
	    	calcResult();
	    }
	    public void removeUpdate(DocumentEvent e) {
	    	calcResult();
	    }
	    public void changedUpdate(DocumentEvent e) {
	    	calcResult();
	    }
	} 
	
	/**
	 * Internal class to listen to the changes in text components
	 */
	protected class ModDocumentListener implements DocumentListener {
	    public void insertUpdate(DocumentEvent e) {
	    	calcEffectiveDefense();
	    }
	    public void removeUpdate(DocumentEvent e) {
	    	calcEffectiveDefense();
	    }
	    public void changedUpdate(DocumentEvent e) {
	    	calcEffectiveDefense();
	    }
	} 
}
