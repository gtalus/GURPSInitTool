/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ActorDetailsPanel.java
 *
 * Created on Jul 19, 2009, 4:46:10 PM
 */

package gurpsinittool.ui;

import java.awt.Color;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;

import gurpsinittool.app.*;
import gurpsinittool.data.Actor;


/**
 *
 * @author dcsmall
 */
public class ActorDetailsPanel extends javax.swing.JPanel 
	implements ListSelectionListener, TableModelListener{

	// Default SVUID
	private static final long serialVersionUID = 1L;

	private static final boolean DEBUG = false;
	
	private InitTable initTable;
	private ActorTableModel actorModel;
	private boolean actorLoaded = false;
	private int selectedActor = -1;
	
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_attack;
    private javax.swing.JButton add_timer;
    private javax.swing.JPanel attacks;
    private javax.swing.JFormattedTextField damage;
    private javax.swing.JFormattedTextField dodge;
    private javax.swing.JFormattedTextField fatigue;
    private javax.swing.JFormattedTextField fp;
    private javax.swing.JFormattedTextField hp;
    private javax.swing.JFormattedTextField ht;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JFormattedTextField move;
    private javax.swing.JTextField name;
    private javax.swing.JTextArea notes;
    private javax.swing.JComboBox status;
    private javax.swing.JPanel timers;
    private javax.swing.JComboBox type;
    // End of variables declaration//GEN-END:variables
    

    /** Creates new form ActorDetailsPanel */
    public ActorDetailsPanel(InitTable initTable) {
    	this.initTable = initTable;
    	this.actorModel= (ActorTableModel) initTable.getModel();
    	initTable.add(this);
    	initTable.getSelectionModel().addListSelectionListener(this);
    	actorModel.addTableModelListener(this);

        initComponents();
        disablePanel();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        timers = new javax.swing.JPanel();
        add_timer = new javax.swing.JButton();
        attacks = new javax.swing.JPanel();
        add_attack = new javax.swing.JButton();
        name = new javax.swing.JTextField();
        status = new javax.swing.JComboBox();
        type = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        hp = new javax.swing.JFormattedTextField();
        damage = new javax.swing.JFormattedTextField();
        ht = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notes = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        fp = new javax.swing.JFormattedTextField();
        move = new javax.swing.JFormattedTextField();
        fatigue = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        dodge = new javax.swing.JFormattedTextField();
        jSeparator2 = new javax.swing.JSeparator();

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel2.setText("Status:");

        jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel3.setText("Type:");

        jLabel4.setFont(jLabel4.getFont().deriveFont(jLabel4.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel4.setText("HT/HP:");

        jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel5.setText("Damage:");

        timers.setBorder(javax.swing.BorderFactory.createTitledBorder("Timers"));

        add_timer.setText("Add Timer");
        add_timer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_timerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout timersLayout = new javax.swing.GroupLayout(timers);
        timers.setLayout(timersLayout);
        timersLayout.setHorizontalGroup(
            timersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, timersLayout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(add_timer))
        );
        timersLayout.setVerticalGroup(
            timersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(timersLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(add_timer))
        );

        attacks.setBorder(javax.swing.BorderFactory.createTitledBorder("Attacks"));

        add_attack.setText("Add Attack");
        add_attack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_attackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout attacksLayout = new javax.swing.GroupLayout(attacks);
        attacks.setLayout(attacksLayout);
        attacksLayout.setHorizontalGroup(
            attacksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, attacksLayout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addComponent(add_attack))
        );
        attacksLayout.setVerticalGroup(
            attacksLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(attacksLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(add_attack))
        );

        name.setBackground(new java.awt.Color(236, 233, 216));
        name.setFont(name.getFont().deriveFont(name.getFont().getStyle() | java.awt.Font.BOLD, name.getFont().getSize()+9));
        name.setText("name");
        name.setBorder(null);
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });
        name.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                nameFocusLost(evt);
            }
        });

        status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Active", "Waiting", "Disabled", "Unconscious", "Dead" }));
        status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statusActionPerformed(evt);
            }
        });

        type.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PC", "Ally", "Enemy", "Neutral", "Special" }));
        type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeActionPerformed(evt);
            }
        });

        jLabel7.setFont(jLabel7.getFont().deriveFont(jLabel7.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel7.setText("FP:");

        hp.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        hp.setText("99");
        hp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocusGained(evt);
            }
        });
        hp.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                hpPropertyChange(evt);
            }
        });

        damage.setForeground(new java.awt.Color(220, 0, 0));
        damage.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        damage.setText("99");
        damage.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocusGained(evt);
            }
        });
        damage.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                damagePropertyChange(evt);
            }
        });

        ht.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        ht.setText("99");
        ht.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocusGained(evt);
            }
        });
        ht.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                htPropertyChange(evt);
            }
        });

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel1.setText("Notes:");

        notes.setColumns(20);
        notes.setRows(5);
        notes.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                namePropertyChange(evt);
            }
        });
        notes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameTextChanged(evt);
            }
        });
        jScrollPane1.setViewportView(notes);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel9.setText("Move:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel10.setText("Dodge:");

        jLabel8.setFont(jLabel8.getFont().deriveFont(jLabel8.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel8.setText("/");

        fp.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        fp.setText("99");
        fp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocusGained(evt);
            }
        });
        fp.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fpPropertyChange(evt);
            }
        });

        move.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        move.setText("99");
        move.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocusGained(evt);
            }
        });
        move.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                movePropertyChange(evt);
            }
        });

        fatigue.setForeground(new java.awt.Color(220, 0, 0));
        fatigue.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        fatigue.setText("99");
        fatigue.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocusGained(evt);
            }
        });
        fatigue.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fatiguePropertyChange(evt);
            }
        });

        jLabel6.setFont(jLabel6.getFont().deriveFont(jLabel6.getFont().getStyle() | java.awt.Font.BOLD));
        jLabel6.setText("Fatigue:");

        dodge.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        dodge.setText("99");
        dodge.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldFocusGained(evt);
            }
        });
        dodge.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                dodgePropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(146, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(timers, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(attacks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel9)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel4))
                                            .addGap(21, 21, 21))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel6)
                                                .addComponent(jLabel5))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(move, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fatigue, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(fp, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(ht, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                                            .addComponent(dodge, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(damage)
                                            .addComponent(hp, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(type, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(status, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(13, 13, 13))
                            .addComponent(jLabel10))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addContainerGap(165, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ht, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(damage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(fp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fatigue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(move, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(dodge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(attacks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void add_timerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_timerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_add_timerActionPerformed

    private void add_attackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_attackActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_add_attackActionPerformed
    
    private void htPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_htPropertyChange
        if(actorLoaded && evt.getPropertyName().equals("value")) {
            actorModel.setValueAt(((Long) ht.getValue()).intValue(), selectedActor, ActorTableModel.columns.HT.ordinal());
        }
    }//GEN-LAST:event_htPropertyChange

    private void hpPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_hpPropertyChange
        if(actorLoaded && evt.getPropertyName().equals("value")) {
           	if (DEBUG) { System.out.println("ActorDetailsPanel: HP Property change event (" + evt.getNewValue() + ") " + evt.getPropertyName() + ": " + evt.toString()); }
            actorModel.setValueAt(((Long) hp.getValue()).intValue(), selectedActor, ActorTableModel.columns.HP.ordinal());
        }
    }//GEN-LAST:event_hpPropertyChange

    private void damagePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_damagePropertyChange
        if(actorLoaded && evt.getPropertyName().equals("value")) {
        	actorModel.setValueAt(((Long) damage.getValue()).intValue(), selectedActor, ActorTableModel.columns.Damage.ordinal());
        }
    }//GEN-LAST:event_damagePropertyChange

    private void fpPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fpPropertyChange
        if(actorLoaded && evt.getPropertyName().equals("value")) {
         	actorModel.setValueAt(((Long) fp.getValue()).intValue(), selectedActor, ActorTableModel.columns.FP.ordinal());
        }	
    }//GEN-LAST:event_fpPropertyChange

    private void fatiguePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fatiguePropertyChange
        if(actorLoaded && evt.getPropertyName().equals("value")) {
        	actorModel.setValueAt(((Long) fatigue.getValue()).intValue(), selectedActor, ActorTableModel.columns.Fatigue.ordinal());
        }
    }//GEN-LAST:event_fatiguePropertyChange

    private void movePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_movePropertyChange
        if(actorLoaded && evt.getPropertyName().equals("value")) {
         	actorModel.setValueAt(((Long) move.getValue()).intValue(), selectedActor, ActorTableModel.columns.Move.ordinal());
        }
    }//GEN-LAST:event_movePropertyChange

    private void dodgePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_dodgePropertyChange
        if(actorLoaded && evt.getPropertyName().equals("value")) {
         	actorModel.setValueAt(((Long) dodge.getValue()).intValue(), selectedActor, ActorTableModel.columns.Dodge.ordinal());
        }
    }//GEN-LAST:event_dodgePropertyChange
    
    private void statusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statusActionPerformed
        if(actorLoaded) {
        	//String newValue = ((JComboBox)evt.getSource()).getSelectedItem().toString();
        	//String oldValue = actorModel.getActor(initTable.getSelectedRow()).State.toString();
            //if (!newValue.equals(oldValue)) {
        		if (DEBUG) { System.out.println("ActorDetailsPanel: State action performed event " + evt.toString()); }
            	actorModel.setValueAt(((JComboBox)evt.getSource()).getSelectedItem().toString(), selectedActor, ActorTableModel.columns.State.ordinal());
            //}
        }
    }//GEN-LAST:event_statusActionPerformed

    private void typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeActionPerformed
        if(actorLoaded) {
        	//String newValue = ((JComboBox)evt.getSource()).getSelectedItem().toString();
        	//String oldValue = actorModel.getActor(initTable.getSelectedRow()).Type.toString();
            //if (!newValue.equals(oldValue)) {
            	actorModel.setValueAt(((JComboBox)evt.getSource()).getSelectedItem().toString(), selectedActor, ActorTableModel.columns.Type.ordinal());
            //}
        }
    }//GEN-LAST:event_typeActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        if(actorLoaded) {
            actorModel.setValueAt(name.getText(), selectedActor, ActorTableModel.columns.Name.ordinal());
        }
    }//GEN-LAST:event_nameActionPerformed

    private void nameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nameFocusLost
        if(actorLoaded) {
            actorModel.setValueAt(name.getText(), selectedActor, ActorTableModel.columns.Name.ordinal());
        }
    }//GEN-LAST:event_nameFocusLost

    private void fieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldFocusGained
        // TODO add your handling code here:
    	if (DEBUG) { System.out.println("ActorDetailsPanel: Focus gained on " + evt.toString()); }
    	JFormattedTextField t = (JFormattedTextField) evt.getComponent();
    	t.setText(t.getText());
    	t.selectAll();
    }//GEN-LAST:event_fieldFocusGained

    private void namePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_namePropertyChange
        // TODO add your handling code here:
    	//if (DEBUG) { System.out.println("ActorDetailsPanel: Changing text to: " + notes.getText()); }
    	//if (selectedActor >= 0)
    	//	actorModel.getActor(selectedActor).Notes = notes.getText();
   }//GEN-LAST:event_namePropertyChange

    private void nameTextChanged(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextChanged
        // TODO add your handling code here:
        if (DEBUG) { System.out.println("ActorDetailsPanel: Changing text to: " + notes.getText()); }
        if(actorLoaded)
    		actorModel.getActor(selectedActor).Notes = notes.getText();
    }//GEN-LAST:event_nameTextChanged



    /**
     * Disable the panel, setting all values to default
     */
    public void disablePanel() {
    	ht.setValue(10);
    	ht.setEnabled(false);
    	hp.setValue(10);
    	hp.setEnabled(false);
    	damage.setValue(0);
    	damage.setEnabled(false);
    	fp.setValue(10);
    	fp.setEnabled(false);
    	fatigue.setValue(0);
    	fatigue.setEnabled(false);
    	move.setValue(5);
    	move.setEnabled(false);
    	dodge.setValue(8);
    	dodge.setEnabled(false);
    	status.setSelectedIndex(0);
    	status.setEnabled(false);
    	type.setSelectedIndex(0);
    	type.setEnabled(false);
    	name.setText("");
    	name.setBackground(new java.awt.Color(236, 233, 216));
    	name.setEnabled(false);
    	add_attack.setEnabled(false);
    	add_timer.setEnabled(false);
    	notes.setText("");
    	notes.setEnabled(false);
    }

    /**
     * Enable the panel fields, only called when the actor is refreshed with good data
     */
    private void enablePanel() {
    	ht.setEnabled(true);
    	hp.setEnabled(true);
    	damage.setEnabled(true);
    	fp.setEnabled(true);
    	fatigue.setEnabled(true);
    	move.setEnabled(true);
    	dodge.setEnabled(true);
    	status.setEnabled(true);
    	type.setEnabled(true);
    	name.setEnabled(true);
    	add_attack.setEnabled(true);
    	add_timer.setEnabled(true);
    	notes.setEnabled(true);
    }

    /**
     * Refresh the actor in the display
     */
	public void refreshActor () {
		actorLoaded = false; // turn off property updates
		if (initTable.getSelectedRow() == -1) { 
			disablePanel();
			return; 
		} 
		enablePanel();
		selectedActor = initTable.getSelectedRow();
		Actor actor = actorModel.getActor(initTable.getSelectedRow());
		name.setText(actor.Name);
		switch (actor.Type) {
		case PC:
			name.setBackground(new Color(200,255,200));
			break;
		case Ally:
			name.setBackground(new Color(200,200,255));
			break;
		case Enemy:
			name.setBackground(new Color(255,200,200));
			break;
		case Neutral:
			name.setBackground(new Color(200,200,200));
			break;
		case Special:
			name.setBackground(new Color(255,200,255));
			break;
		}
		name.setForeground(new Color(0,0,0));
		switch (actor.State) {
		case Active:
			break;
		case Waiting:
			//name.setHorizontalAlignment(SwingConstants.RIGHT);
			break;
		case Disabled:
			break;
		case Unconscious:
		case Dead:
			name.setForeground(new Color(128,128,128));
			break;
		}
	
	    status.setSelectedItem(actor.State.toString());
	    type.setSelectedItem(actor.Type.toString());
	    ht.setValue(((Integer)actor.HT).longValue());
	    hp.setValue(((Integer)actor.HP).longValue());
	    damage.setValue(((Integer)actor.Damage).longValue());
	    fp.setValue(((Integer)actor.FP).longValue());
	    fatigue.setValue(((Integer)actor.Fatigue).longValue());
	    move.setValue(((Integer)actor.Move).longValue());
	    dodge.setValue(((Integer)actor.Dodge).longValue());
	    notes.setText(actor.Notes);
		actorLoaded = true; // turn property updates back on
	}

	/**
	 * Set the actor table model used for displaying actors.
	 * @param model : the model to use.
	 */
	public void setActorModel(ActorTableModel model) {
		if (actorModel != null)
			actorModel.removeTableModelListener(this);
		if(model != null) 
			model.addTableModelListener(this);
		
		actorModel = model;
		refreshActor();
	}
	
 	@Override
	public void tableChanged(TableModelEvent e) {
		if (DEBUG) { System.out.println("ActorDetailsPanel: Table Model event: type = " + e.getType() + ", " + e.toString()); }
		refreshActor();
	}
	
	@Override
	public void valueChanged(ListSelectionEvent e) {
		if (DEBUG) { System.out.println("ActorDetailsPanel: List Selection event: " + e.getSource().toString()); }
		if(!e.getValueIsAdjusting()) {
			refreshActor();
		}
	}
}
