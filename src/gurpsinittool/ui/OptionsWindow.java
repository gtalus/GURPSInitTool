/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gurpsinittool.ui;

import gurpsinittool.data.GameSettings;

import java.util.Properties;

/**
 *
 * @author dcsmall
 */
public class OptionsWindow extends javax.swing.JFrame {

    public GameSettings currentSettings;
    private Properties propertyBag;
    
    /**
     * Creates new form OptionsWindow
     */
    public OptionsWindow(Properties propertyBag) {
        this.currentSettings = new GameSettings();
        this.propertyBag = propertyBag;
        initComponents();
        
        setDefaultProperties();
        setLocation(Integer.valueOf(propertyBag.getProperty("Options.location.x")),
                Integer.valueOf(propertyBag.getProperty("Options.location.y")));
        setSize(Integer.valueOf(propertyBag.getProperty("Options.size.width")),
        		Integer.valueOf(propertyBag.getProperty("Options.size.height")));
        
		 if (propertyBag.containsKey("Options.game.AUTO_ATTACK")) {
			 currentSettings.setAUTO_ATTACK(Boolean.valueOf(propertyBag.getProperty("Options.game.AUTO_ATTACK"))); }
		 if (propertyBag.containsKey("Options.game.AUTO_KNOCKDOWNSTUN")) {
			 currentSettings.setAUTO_KNOCKDOWNSTUN(Boolean.valueOf(propertyBag.getProperty("Options.game.AUTO_KNOCKDOWNSTUN"))); }
		 if (propertyBag.containsKey("Options.game.AUTO_STUNRECOVERY")) {
			 currentSettings.setAUTO_STUNRECOVERY(Boolean.valueOf(propertyBag.getProperty("Options.game.AUTO_STUNRECOVERY"))); }
		 if (propertyBag.containsKey("Options.game.AUTO_UNCONSCIOUS")) {
			 currentSettings.setAUTO_UNCONSCIOUS(Boolean.valueOf(propertyBag.getProperty("Options.game.AUTO_UNCONSCIOUS"))); }

    }

    /**
	  * Set default properties if they are not already defined.
	  */
	 private void setDefaultProperties() {
		 if (!propertyBag.containsKey("Options.location.x")) {
			 propertyBag.setProperty("Options.location.x", "500"); }
		 if (!propertyBag.containsKey("Options.location.y")) {
			 propertyBag.setProperty("Options.location.y", "300"); }
		 if (!propertyBag.containsKey("Options.size.width")) {
			 propertyBag.setProperty("Options.size.width",  String.valueOf(getPreferredSize().width)); }
		 if (!propertyBag.containsKey("Options.size.height")) {
			 propertyBag.setProperty("Options.size.height",  String.valueOf(getPreferredSize().height)); }
	 }
	 
	 /**
	  * Update all the store-able properties to their current values
	  */
	 public void updateProperties() {
		 // Kept up-to-date with event listeners
		 propertyBag.setProperty("Options.location.x", String.valueOf(getLocation().x));
		 propertyBag.setProperty("Options.location.y", String.valueOf(getLocation().y));
		 propertyBag.setProperty("Options.size.width", String.valueOf(getSize().width));
		 propertyBag.setProperty("Options.size.height", String.valueOf(getSize().height));
		 propertyBag.setProperty("Options.game.AUTO_ATTACK", String.valueOf(currentSettings.isAUTO_ATTACK()));
		 propertyBag.setProperty("Options.game.AUTO_KNOCKDOWNSTUN", String.valueOf(currentSettings.isAUTO_KNOCKDOWNSTUN()));
		 propertyBag.setProperty("Options.game.AUTO_STUNRECOVERY", String.valueOf(currentSettings.isAUTO_STUNRECOVERY()));
		 propertyBag.setProperty("Options.game.AUTO_UNCONSCIOUS", String.valueOf(currentSettings.isAUTO_UNCONSCIOUS()));
	 }
	 
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        localSettings = new gurpsinittool.data.GameSettings();
        combatAutomationPanel = new javax.swing.JPanel();
        auto_attack = new javax.swing.JCheckBox();
        auto_unconsciousness = new javax.swing.JCheckBox();
        auto_knockdown = new javax.swing.JCheckBox();
        auto_stunrecovery = new javax.swing.JCheckBox();
        okButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("InitTool Settings");

        combatAutomationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Enemy Automation"));

        auto_attack.setText("Attack");
        auto_attack.setToolTipText("Enemy creatures with the 'Attacking' status automatically perform their default attack when it is their turn, as long as they are not Stunned.");

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, localSettings, org.jdesktop.beansbinding.ELProperty.create("${AUTO_ATTACK}"), auto_attack, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        auto_unconsciousness.setText("Unconsciousness Checks");
        auto_unconsciousness.setToolTipText("Enemy creatures check for unconsciousness at the start of each of their turns.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, localSettings, org.jdesktop.beansbinding.ELProperty.create("${AUTO_UNCONSCIOUS}"), auto_unconsciousness, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        auto_knockdown.setText("Knockdown and Stunning");
        auto_knockdown.setToolTipText("Enemy Creatures check for knockdown and stunning when taking sufficient damage.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, localSettings, org.jdesktop.beansbinding.ELProperty.create("${AUTO_KNOCKDOWNSTUN}"), auto_knockdown, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        auto_stunrecovery.setText("Stun Recovery");
        auto_stunrecovery.setToolTipText("Stunned Enemy Creatures check for stun recovery at the start of their turns.");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, localSettings, org.jdesktop.beansbinding.ELProperty.create("${AUTO_STUNRECOVERY}"), auto_stunrecovery, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        javax.swing.GroupLayout combatAutomationPanelLayout = new javax.swing.GroupLayout(combatAutomationPanel);
        combatAutomationPanel.setLayout(combatAutomationPanelLayout);
        combatAutomationPanelLayout.setHorizontalGroup(
            combatAutomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(combatAutomationPanelLayout.createSequentialGroup()
                .addGroup(combatAutomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(auto_attack)
                    .addComponent(auto_unconsciousness)
                    .addComponent(auto_knockdown)
                    .addComponent(auto_stunrecovery))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        combatAutomationPanelLayout.setVerticalGroup(
            combatAutomationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(combatAutomationPanelLayout.createSequentialGroup()
                .addComponent(auto_attack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(auto_unconsciousness)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(auto_knockdown)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, Short.MAX_VALUE)
                .addComponent(auto_stunrecovery)
                .addContainerGap())
        );

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        applyButton.setText("Apply");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(combatAutomationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 145, Short.MAX_VALUE)
                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(applyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(combatAutomationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(applyButton)
                    .addComponent(okButton)))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        System.out.println("DefenseDialog: OK!");
        currentSettings.syncFrom(localSettings);
    	setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        System.out.println("OptionsWindow: Apply!");
    	currentSettings.syncFrom(localSettings);
    }//GEN-LAST:event_applyButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        System.out.println("OptionsWindow: CANCEL!");
        localSettings.syncFrom(currentSettings);
    	setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    public void syncFromCurrentSettings() {
    	localSettings.syncFrom(currentSettings);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OptionsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OptionsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OptionsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OptionsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OptionsWindow(new Properties()).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JCheckBox auto_attack;
    private javax.swing.JCheckBox auto_knockdown;
    private javax.swing.JCheckBox auto_stunrecovery;
    private javax.swing.JCheckBox auto_unconsciousness;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel combatAutomationPanel;
    private gurpsinittool.data.GameSettings localSettings;
    private javax.swing.JButton okButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
